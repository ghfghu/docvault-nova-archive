import React, { createContext, useContext, useState, useCallback } from 'react';

// Define the context type
interface LanguageContextType {
  language: 'en' | 'ar';
  setLanguage: (language: 'en' | 'ar') => void;
  t: (key: string) => string;
}

// Create the context with a default value
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Translations
const translations = {
  en: {
    scanDocument: 'Scan Document',
    captureDocument: 'Capture a document by taking a picture with your camera.',
    cameraCapture: 'Camera Capture',
    documentInfo: 'Document Information',
    documentName: 'Document Name',
    enterDocumentName: 'Enter document name',
    date: 'Date',
    documentType: 'Document Type',
    selectType: 'Select document type',
    priority: 'Priority',
    viewingTag: 'Viewing Tag',
    selectTag: 'Select viewing tag',
    observationNotes: 'Observation Notes',
    enterNotes: 'Enter observation notes',
    cancel: 'Cancel',
    saveDocument: 'Save Document',
    noImages: 'No Images',
    captureImageFirst: 'Please capture an image first.',
    cameraError: 'Camera Error',
    cameraPermissionError: 'Please grant camera permissions to use this feature.',
    imageCaptured: 'Image Captured',
    ofImages: 'of Images',
    startCamera: 'Start Camera',
    enableFlash: 'Enable Flash',
    disableFlash: 'Disable Flash',
    flashNotSupported: 'Flash Not Supported',
    deviceNoFlash: 'Your device does not support flash.',
    addAnotherImage: 'Add Another Image',
    english: 'English',
    arabic: 'Arabic',
    dashboard: 'Dashboard',
    documents: 'Documents',
    wantedPersons: 'Wanted Persons',
    reports: 'Reports',
    settings: 'Settings',
    logout: 'Logout',
    general: 'General',
    account: 'Account',
    appearance: 'Appearance',
    language: 'Language',
    theme: 'Theme',
    auto: 'Auto',
    light: 'Light',
    dark: 'Dark',
    notifications: 'Notifications',
    emailNotifications: 'Email Notifications',
    pushNotifications: 'Push Notifications',
    privacy: 'Privacy',
    dataSharing: 'Data Sharing',
    termsOfService: 'Terms of Service',
    contactUs: 'Contact Us',
    aboutUs: 'About Us',
    version: 'Version',
    rightsReserved: 'All Rights Reserved',
    confirmLogout: 'Are you sure you want to logout?',
    yes: 'Yes',
    no: 'No',
    name: 'Name',
    fullName: 'Full Name',
    photo: 'Photo',
    documentNumber: 'Document Number',
    notes: 'Notes',
    addWantedPerson: 'Add Wanted Person',
    editWantedPerson: 'Edit Wanted Person',
    enterFullName: 'Enter full name',
    enterDocumentNumber: 'Enter document number',
    enterNotesHere: 'Enter notes here',
    wantedPersonAdded: 'Wanted person added successfully!',
    wantedPersonUpdated: 'Wanted person updated successfully!',
    wantedPersonDeleted: 'Wanted person deleted successfully!',
    deleteConfirmation: 'Are you sure you want to delete this person?',
    addDocument: 'Add Document',
    editDocument: 'Edit Document',
    documentAdded: 'Document added successfully!',
    documentUpdated: 'Document updated successfully!',
    documentDeleted: 'Document deleted successfully!',
    deleteDocumentConfirmation: 'Are you sure you want to delete this document?',
    import: 'Import',
    export: 'Export',
    clearAllData: 'Clear All Data',
    loadSampleData: 'Load Sample Data',
    importData: 'Import Data',
    exportData: 'Export Data',
    clearDataConfirmation: 'Are you sure you want to clear all data?',
    loadSampleDataConfirmation: 'Are you sure you want to load sample data? This will overwrite your current data.',
    dataImportedSuccessfully: 'Data imported successfully!',
    dataExportedSuccessfully: 'Data exported successfully!',
    sampleDataLoadedSuccessfully: 'Sample data loaded successfully!',
    allDataClearedSuccessfully: 'All data cleared successfully!',
    invalidJsonFormat: 'Invalid JSON format.',
    importExport: 'Import / Export',
    dangerZone: 'Danger Zone',
    darkMode: 'Dark Mode',
    enableAutofill: 'Enable Autofill',
    enableAssistantTips: 'Enable Assistant Tips',
    showOnboarding: 'Show Onboarding',
    cameraLoading: 'Camera is loading...',
    cameraNotReady: 'Camera is not ready yet. Please wait.',
    captureError: 'Error capturing image',
  },
  ar: {
    scanDocument: 'مسح المستند',
    captureDocument: 'التقط صورة لمستند باستخدام كاميرا جهازك.',
    cameraCapture: 'التقاط بالكاميرا',
    documentInfo: 'معلومات المستند',
    documentName: 'اسم المستند',
    enterDocumentName: 'أدخل اسم المستند',
    date: 'التاريخ',
    documentType: 'نوع المستند',
    selectType: 'اختر نوع المستند',
    priority: 'الأولوية',
    viewingTag: 'علامة العرض',
    selectTag: 'اختر علامة العرض',
    observationNotes: 'ملاحظات المراقبة',
    enterNotes: 'أدخل ملاحظات المراقبة',
    cancel: 'إلغاء',
    saveDocument: 'حفظ المستند',
    noImages: 'لا توجد صور',
    captureImageFirst: 'يرجى التقاط صورة أولاً.',
    cameraError: 'خطأ في الكاميرا',
    cameraPermissionError: 'يرجى منح أذونات الكاميرا لاستخدام هذه الميزة.',
    imageCaptured: 'تم التقاط الصورة',
    ofImages: 'من الصور',
    startCamera: 'تشغيل الكاميرا',
    enableFlash: 'تمكين الفلاش',
    disableFlash: 'تعطيل الفلاش',
    flashNotSupported: 'الفلاش غير مدعوم',
    deviceNoFlash: 'جهازك لا يدعم الفلاش.',
    addAnotherImage: 'إضافة صورة أخرى',
    english: 'الإنجليزية',
    arabic: 'العربية',
    dashboard: 'لوحة التحكم',
    documents: 'المستندات',
    wantedPersons: 'المطلوبين',
    reports: 'التقارير',
    settings: 'الإعدادات',
    logout: 'تسجيل الخروج',
    general: 'عام',
    account: 'الحساب',
    appearance: 'المظهر',
    language: 'اللغة',
    theme: 'السمة',
    auto: 'تلقائي',
    light: 'فاتح',
    dark: 'داكن',
    notifications: 'الإشعارات',
    emailNotifications: 'إشعارات البريد الإلكتروني',
    pushNotifications: 'إشعارات الدفع',
    privacy: 'الخصوصية',
    dataSharing: 'مشاركة البيانات',
    termsOfService: 'شروط الخدمة',
    contactUs: 'اتصل بنا',
    aboutUs: 'معلومات عنا',
    version: 'الإصدار',
    rightsReserved: 'جميع الحقوق محفوظة',
    confirmLogout: 'هل أنت متأكد أنك تريد تسجيل الخروج؟',
    yes: 'نعم',
    no: 'لا',
    name: 'الاسم',
    fullName: 'الاسم الكامل',
    photo: 'الصورة',
    documentNumber: 'رقم الوثيقة',
    notes: 'ملاحظات',
    addWantedPerson: 'إضافة شخص مطلوب',
    editWantedPerson: 'تعديل شخص مطلوب',
    enterFullName: 'أدخل الاسم الكامل',
    enterDocumentNumber: 'أدخل رقم الوثيقة',
    enterNotesHere: 'أدخل الملاحظات هنا',
    wantedPersonAdded: 'تمت إضافة الشخص المطلوب بنجاح!',
    wantedPersonUpdated: 'تم تحديث الشخص المطلوب بنجاح!',
    wantedPersonDeleted: 'تم حذف الشخص المطلوب بنجاح!',
    deleteConfirmation: 'هل أنت متأكد أنك تريد حذف هذا الشخص؟',
    addDocument: 'إضافة مستند',
    editDocument: 'تعديل مستند',
    documentAdded: 'تمت إضافة المستند بنجاح!',
    documentUpdated: 'تم تحديث المستند بنجاح!',
    documentDeleted: 'تم حذف المستند بنجاح!',
    deleteDocumentConfirmation: 'هل أنت متأكد أنك تريد حذف هذا المستند؟',
    import: 'استيراد',
    export: 'تصدير',
    clearAllData: 'مسح جميع البيانات',
    loadSampleData: 'تحميل بيانات تجريبية',
    importData: 'استيراد البيانات',
    exportData: 'تصدير البيانات',
    clearDataConfirmation: 'هل أنت متأكد أنك تريد مسح جميع البيانات؟',
    loadSampleDataConfirmation: 'هل أنت متأكد أنك تريد تحميل بيانات تجريبية؟ سيؤدي ذلك إلى استبدال بياناتك الحالية.',
    dataImportedSuccessfully: 'تم استيراد البيانات بنجاح!',
    dataExportedSuccessfully: 'تم تصدير البيانات بنجاح!',
    sampleDataLoadedSuccessfully: 'تم تحميل البيانات التجريبية بنجاح!',
    allDataClearedSuccessfully: 'تم مسح جميع البيانات بنجاح!',
    invalidJsonFormat: 'تنسيق JSON غير صالح.',
    importExport: 'استيراد / تصدير',
    dangerZone: 'منطقة الخطر',
    darkMode: 'الوضع الداكن',
    enableAutofill: 'تمكين الملء التلقائي',
    enableAssistantTips: 'تمكين تلميحات المساعد',
    showOnboarding: 'عرض التعليمات',
    cameraLoading: 'الكاميرا قيد التحميل...',
    cameraNotReady: 'الكاميرا ليست جاهزة بعد. يرجى الانتظار.',
    captureError: 'خطأ في التقاط الصورة',
  },
};

// Provider component
export const LanguageProvider = ({ children }: { children: React.ReactNode }) => {
  const [language, setLanguage] = useState<'en' | 'ar'>('en');

  // Function to translate text
  const t = useCallback((key: string) => {
    return translations[language][key] || key;
  }, [language]);

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

// Custom hook to use the language context
export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
